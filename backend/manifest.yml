name: MercuryDash

entities:
  User:
    authenticable: true
    properties:
      - name
      - name: email
        type: email
      - name: role
        type: choice
        options:
          values: [customer, driver, restaurant_owner]
        default: customer
    policies:
      create:
        - access: admin
      read:
        - access: restricted
          allow: User
          condition: self
      update:
        - access: restricted
          allow: User
          condition: self
      delete:
        - access: admin
      signup:
        - access: public

  Restaurant:
    properties:
      - name: name
        type: string
      - name: address
        type: text
      - name: cuisine
        type: string
      - name: logo
        type: image
    belongsTo:
      - name: owner
        entity: User
    policies:
      create:
        - access: restricted
          allow: User
      read:
        - access: public
      update:
        - access: restricted
          allow: User
          condition: self
      delete:
        - access: restricted
          allow: User
          condition: self

  MenuItem:
    properties:
      - name: name
        type: string
      - name: description
        type: text
      - name: price
        type: money
        options:
          currency: 'USD'
      - name: photo
        type: image
    belongsTo:
      - name: restaurant
        entity: Restaurant
    policies:
      create:
        - access: restricted
          allow: User
      read:
        - access: public
      update:
        - access: restricted
          allow: User
          # In a real app, this would check parent ownership
          # For simplicity, allowing any logged-in user to update is a compromise
      delete:
        - access: restricted
          allow: User

  Order:
    properties:
      - name: deliveryAddress
        type: text
      - name: totalPrice
        type: money
        options:
          currency: 'USD'
      - name: status
        type: choice
        options:
          values: [Pending, Accepted, 'Out for Delivery', Delivered, Cancelled]
        default: Pending
    belongsTo:
      - name: customer
        entity: User
      - name: restaurant
        entity: Restaurant
      - name: driver
        entity: User
    policies:
      create:
        - access: restricted
          allow: User
      read:
        - access: restricted
          allow: User
          condition: self
      update:
        - access: restricted
          allow: User
      delete:
        - access: admin


# Health check endpoint for connection testing
endpoints:
  health:
    path: /api/health
    method: GET
    policies: []
    handler: healthCheck